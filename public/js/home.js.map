{"version":3,"sources":["client/js/configuration.js","client/js/home.js"],"names":[],"mappingshMA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA","file":"output-dev/js/home.js","sourcesContent":["/**\r\n * Configuration module\r\n */\r\n\r\n/**\r\n * Helper function to remove comments from the JSON file\r\n */\r\nvar removeComments = function(string) {\r\n\tvar starCommentRe = new RegExp(\"/\\\\\\*(.|[\\r\\n])*?\\\\\\*/\", \"g\");\r\n\tvar slashCommentRe = new RegExp(\"(^[\\/]|[^:]\\/)\\/.*[\\r|\\n]\", \"g\");\r\n\tstring = string.replace(slashCommentRe, \"\");\r\n\tstring = string.replace(starCommentRe, \"\");\r\n\r\n\treturn string;\r\n};\r\n\r\n/**\r\n * Helper recursive function to get a parameter from the configuration data\r\n */\r\nvar _getValue = function(object, property, defaultValue) {\r\n\tif (object) {\r\n\t\tvar value = null;\r\n\t\tvar kv = property.split(\"=\"); // Split by \"=\" to handle arrays\r\n\t\tif (kv.length == 2) {\r\n\t\t\t// Array\r\n\t\t\tvalue = _.find(object, function(item) {\r\n\t\t\t\treturn item[kv[0]] == kv[1];\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Object\r\n\t\t\tvalue = object[property];\r\n\t\t}\r\n\r\n\t\tif (typeof value != 'undefined') {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn defaultValue;\r\n};\r\n\r\nvar configuration = {\r\n\r\n\t// The base url to retreive the configurations\r\n\turl: '../conf',\r\n\r\n\t// The base server url\r\n\tbaseServerUrl: '/ngeo',\r\n\r\n\t// The server host name\r\n\tserverHostName: window.location.protocol + '//' + window.location.host,\r\n\r\n\t// Local configuration\r\n\tlocalConfig: null,\r\n\r\n\t// Configuration\r\n\tdata: {},\r\n\r\n\t// Load configurations\r\n\tload: function() {\r\n\t\tvar externalData = {};\r\n\t\treturn $.when(\r\n\t\t\t// Local configuration\r\n\t\t\t$.ajax({\r\n\t\t\t\t//url: this.serverHostName + \"/client-dev/conf/localConfiguration.json\",\r\n\t\t\t\turl: this.url + \"/localConfiguration.json\",\r\n\t\t\t\tdataType: 'json',\r\n\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\tconfiguration.localConfig = data;\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown) {\r\n\t\t\t\t\tconsole.log(\"Local configuration not found \" + textStatus + ' ' + errorThrown);\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t// Server configuration\r\n\t\t\t$.when(\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\turl: this.url + \"/configuration.json\",\r\n\t\t\t\t\tdataType: 'text',\r\n\t\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\t\tconfiguration.setConfigurationData(data);\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown) {\r\n\t\t\t\t\t\tconsole.log(\"Configuration not found \" + textStatus + ' ' + errorThrown);\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\turl: this.baseServerUrl + \"/webClientConfigurationData\",\r\n\t\t\t\t\tdataType: 'text',\r\n\t\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\t\texternalData = data;\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown) {\r\n\t\t\t\t\t\tconsole.log(\"Configuration not found \" + textStatus + ' ' + errorThrown);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t).then(function(){\r\n\t\t\t\t// Override our's server configuration with one coming from WEBS\r\n\t\t\t\tconfiguration.buildServerConfiguration(externalData);\r\n\t\t\t})\r\n\t\t);\r\n\t},\r\n\r\n\tsetConfigurationData: function(configurationData) {\r\n\t\tconfiguration.data = JSON.parse(removeComments(configurationData));\r\n\t},\r\n\r\n\t/**\r\n\t *\tBuild server configuration\r\n\t */\r\n\tbuildServerConfiguration: function(externalData) {\r\n\t\t// Remove comments \r\n\t\texternalData = JSON.parse(removeComments(externalData));\r\n\r\n\t\t// Merge configurations with priority to configuration coming from server\r\n\t\t$.extend(true, configuration.data, externalData);\r\n\t},\r\n\r\n\t// Get a configuration parameter\r\n\tget: function(path, defaultValue) {\r\n\t\treturn this.data ? this.getFromPath(this.data, path, defaultValue) : defaultValue;\r\n\t},\r\n\r\n\t/**\r\n\t *\tGet mapped property for the given object\r\n\t *\tEx: with \"propertyId\": \"path.in.the.object\" defined in configuration.json\r\n\t *\tand object = { path: { in: { the: { object: \"someValue\" } } } }\r\n\t *\tBy calling:\r\n\t *\t>Configuration.getMappedProperty(object, \"propertyId\");\r\n\t *\tYou will get:\r\n\t *\t>\"someValue\"\r\n\t *\r\n\t *\t@param object\r\n\t *\t\tObject from which you need to extract the property\r\n\t *\t@param propertyId\r\n\t *\t\tThe property id which is defined in configuration.json in serverPropertyMapper object\r\n\t *\t@param defaultValue\r\n\t *\t\tThe default value if the path wasn't found\r\n\t */\r\n\tgetMappedProperty: function(object, propertyId, defaultValue) {\r\n\t\t//var propertyPath = this.get(\"serverPropertyMapper.\"+propertyId);\r\n\t\tvar propertyPath = this.getFromPath(this.localConfig, \"serverPropertyMapper.\" + propertyId);\r\n\t\tif (propertyPath) {\r\n\t\t\tvar value = this.getFromPath(object, propertyPath, defaultValue);\r\n\t\t\tif (propertyId == \"browses\" && !_.isArray(value)) {\r\n\t\t\t\t// HACK: since WEBS sends browses as an Object when there is only one browse\r\n\t\t\t\t// we don't want to change all the logic in WEBC so convert it to array here for now\r\n\t\t\t\t// For more details see NGEO-2182 (in comments)\r\n\t\t\t\tvalue = [value];\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t} else {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t *\tSet mapped property\r\n\t *\t@see getMappedProperty for more\r\n\t */\r\n\tsetMappedProperty: function(object, propertyId, value) {\r\n\t\t//var propertyPath = this.get(\"serverPropertyMapper.\"+propertyId);\r\n\t\tvar propertyPath = this.getFromPath(this.localConfig, \"serverPropertyMapper.\" + propertyId);\r\n\t\tif (propertyPath) {\r\n\t\t\tvar parentPath = propertyPath.substr(propertyPath, propertyPath.lastIndexOf(\".\"));\r\n\t\t\tvar prop = propertyPath.substr(propertyPath.lastIndexOf(\".\") + 1);\r\n\t\t\tvar parentValue = this.getFromPath(object, parentPath, null)\r\n\t\t\tif (parentValue) {\r\n\t\t\t\tparentValue[prop] = value;\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(parentPath + \" doesn't exist\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.warn(propertyId + \" wasn't found in serverPropertyMapper\");\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t *\tHelper imperative function to get a parameter from the configuration data\r\n\t *\t(much faster than recursive one...)\r\n\t */\r\n\tgetFromPath: function(object, path, defaultValue) {\r\n\t\tvar names = path.split('.');\r\n\t\tvar obj = object;\r\n\t\tfor (var i = 0; obj && i < names.length - 1; i++) {\r\n\t\t\tobj = _getValue(obj, names[i]);\r\n\t\t}\r\n\r\n\t\treturn _getValue(obj, names[names.length - 1], defaultValue);\r\n\t}\r\n};\r\n\r\nmodule.exports = configuration;","\"use strict\";\n\nvar Configuration = require(\"configuration\");\n\nmodule.exports = {\n\tinitialize: function(confPath) {\n\t\t// MS: Ugly hack to find the relative path to configuration\n\t\tConfiguration.url = confPath ? confPath : \"conf\";\n\t\tConfiguration.load().done(function() {\n\t\t\t$(\"body .contactUs\").attr(\"href\", \"mailto:\" + Configuration.get(\"mailto\"));\n\t\t});\n\t}\n};"]}